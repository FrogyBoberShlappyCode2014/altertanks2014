<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html lang="ua">
<head>
    <title>AlterTanks - –í–•–†–Æ–ö-–¢–∞–Ω–∫–æ–≤—ñ –ë–æ—ó –≤—ñ–¥ Shlappy.App! üí•üê∏</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="keywords" content="AlterTanks, World of Tanks, HTML5, –≥—Ä–∞, —Ç–∞–Ω–∫–∏, Web 1.0, Shlappy, –í–•–†–Æ–ö, –∞–±—Å—É—Ä–¥">
    <meta name="description" content="–ê–±—Å—É—Ä–¥–Ω–∏–π HTML5 –∞–Ω–∞–ª–æ–≥ —Å—Ç–∞—Ä–∏—Ö —Ç–∞–Ω–∫–æ–≤–∏—Ö –±–æ—ó–≤ —É —Å—Ç–∏–ª—ñ Web 1.0 –≤—ñ–¥ Shlappy.App. –ö–í–ê-–ö–í–ê! –ñ–û–†–°–¢–ö–û!">
    <meta name="author" content="–®–ª—è–ø–Ω–∏–π –ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ë–µ–∑–ª–∞–¥—É">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <style type="text/css">
        /* –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –∫–æ–ª—å–æ—Ä—ñ–≤ - –¢–û–ß–ù–û –Ø–ö –ù–ê –°–ö–†–Ü–ù–®–û–¢–Ü */
        :root {
            --bg-color: #000000; /* –ê–±—Å–æ–ª—é—Ç–Ω–æ —á–æ—Ä–Ω–∏–π —Ñ–æ–Ω */
            --main-text-color: #00FF00; /* –Ø—Å–∫—Ä–∞–≤–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É */
            --header-color: #FFFF00; /* –ñ–æ–≤—Ç–∏–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ */
            --link-color: #00FFFF; /* –ë—ñ—Ä—é–∑–æ–≤–∏–π –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å */
            --border-color: #00FF00; /* –ó–µ–ª–µ–Ω–∞ —Ä–∞–º–∫–∞ */
            --terminal-bg: #000000; /* –ß–æ—Ä–Ω–∏–π —Ñ–æ–Ω —Ç–µ—Ä–º—ñ–Ω–∞–ª–∞ */
            --input-text-color: #00FF00; /* –ó–µ–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç—É —Ç–µ—Ä–º—ñ–Ω–∞–ª–∞ */
            --button-bg: #006400; /* –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
            --button-text: #FFFFFF; /* –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö */
            --button-hover-bg: #00AA00; /* –°–≤—ñ—Ç–ª—ñ—à–∏–π –∑–µ–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ */
            --button-hover-text: #FFFF00; /* –ñ–æ–≤—Ç–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É */
            --scroll-thumb: #00FF00; /* –ó–µ–ª–µ–Ω–∏–π —Å–∫—Ä–æ–ª–±–∞—Ä */
            --scroll-track: #333333; /* –¢–µ–º–Ω–∏–π —Ç—Ä–µ–∫ —Å–∫—Ä–æ–ª–±–∞—Ä—É */
            --neon-glow-main: 0 0 5px rgba(0, 255, 0, 0.7), 0 0 10px rgba(0, 255, 0, 0.5), 0 0 15px rgba(0, 255, 0, 0.3); /* –ó–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç—ñ–Ω–Ω—è */
            --neon-glow-header: 0 0 5px rgba(255, 255, 0, 0.7), 0 0 10px rgba(255, 255, 0, 0.5); /* –ñ–æ–≤—Ç–µ —Å–≤—ñ—Ç—ñ–Ω–Ω—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ */
            --neon-glow-link: 0 0 3px rgba(0, 255, 255, 0.7), 0 0 7px rgba(0, 255, 255, 0.5); /* –ë—ñ—Ä—é–∑–æ–≤–µ —Å–≤—ñ—Ç—ñ–Ω–Ω—è –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å */
            --neon-glow-pink: 0 0 3px rgba(255, 0, 255, 0.7), 0 0 7px rgba(255, 0, 255, 0.5); /* –†–æ–∂–µ–≤–µ —Å–≤—ñ—Ç—ñ–Ω–Ω—è */
            --tank-player-color: #00AA00; /* –ó–µ–ª–µ–Ω–∏–π –¥–ª—è —Ç–∞–Ω–∫–∞ –≥—Ä–∞–≤—Ü—è */
            --tank-enemy-color: #FF0000; /* –ß–µ—Ä–≤–æ–Ω–∏–π –¥–ª—è –≤–æ—Ä–æ–∂–æ–≥–æ —Ç–∞–Ω–∫–∞ */
            --bullet-color: #FFFF00; /* –ñ–æ–≤—Ç–∏–π –¥–ª—è —Å–Ω–∞—Ä—è–¥—ñ–≤ */
            --health-bar-full: #00FF00; /* –ó–µ–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è */
            --health-bar-empty: #FF0000; /* –ß–µ—Ä–≤–æ–Ω–∏–π –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è */
        }

        body {
            background-color: var(--bg-color);
            color: var(--main-text-color);
            font-family: 'Courier New', Courier, monospace;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            box-sizing: border-box;
            line-height: 1.4;
            text-shadow: 0 0 1px var(--main-text-color);
        }

        .game-wrapper {
            max-width: 820px; /* –î–ª—è Canvas 800px + –ø–∞–¥–¥—ñ–Ω–≥ */
            width: 100%;
            border: 2px dashed var(--border-color);
            padding: 20px;
            background-color: rgba(0, 0, 0, 0.8);
            box-shadow: var(--neon-glow-main);
            text-align: center;
        }

        h1 {
            color: var(--header-color);
            text-align: center;
            margin-bottom: 20px;
            text-shadow: var(--neon-glow-header);
            font-size: 2.5em;
            font-weight: normal;
        }

        canvas {
            background-color: #1a1a1a; /* –¢–µ–º–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –ø–æ–ª—è –±–æ—é */
            border: 1px solid var(--border-color);
            display: block;
            margin: 0 auto 20px auto;
            box-shadow: var(--neon-glow-main);
        }

        .game-info {
            margin-bottom: 20px;
            font-size: 1.1em;
            color: var(--link-color);
            text-shadow: var(--neon-glow-link);
        }

        .controls-info {
            font-size: 0.9em;
            margin-bottom: 20px;
            color: #AAAAAA;
        }

        button {
            background-color: var(--button-bg);
            color: var(--button-text);
            border: 2px dashed var(--button-hover-bg);
            padding: 12px 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
            margin: 8px;
            box-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
            font-family: 'Courier New', Courier, monospace;
        }
        button:hover {
            background-color: var(--button-hover-bg);
            color: var(--button-hover-text);
            border-color: #FFFF00;
            box-shadow: 0 0 10px rgba(255, 255, 0, 0.7);
        }

        #game-message {
            margin-top: 25px;
            padding: 15px;
            border: 1px dashed var(--neon-glow-pink);
            background-color: rgba(0, 0, 0, 0.7);
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2em;
            color: var(--neon-glow-pink);
            text-shadow: var(--neon-glow-pink);
        }

        .footer-text {
            margin-top: 40px;
            font-size: 0.85em;
            color: #AAAAAA;
            text-align: center;
            text-shadow: 0 0 1px #AAAAAA;
        }

        /* –°—Ç–∏–ª—ñ –¥–ª—è —Ç–∞–Ω–∫—ñ–≤ —Ç–∞ —Å–Ω–∞—Ä—è–¥—ñ–≤ - –ø—Ä–æ—Å—Ç—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏ */
        .tank-player, .tank-enemy {
            background-color: var(--tank-player-color);
            position: absolute;
            width: 40px;
            height: 40px;
        }
        .tank-enemy {
            background-color: var(--tank-enemy-color);
        }
        .bullet {
            background-color: var(--bullet-color);
            position: absolute;
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
    </style>
</head>
<body>

    <div class="game-wrapper">
        <h1>AlterTanks: –í–•–†–Æ–ö-–ë–æ–π–æ–≤—ñ –ú–∞—à–∏–Ω–∏! üí•</h1>
        <p class="game-info">
            –í–Ü–¢–ê–Ñ–ú–û –≤ –∞—Ä–µ–Ω—ñ **–ê–ë–°–£–†–î–ù–û–ì–û –¢–ê–ù–ö–û–í–û–ì–û –ë–û–Æ**! –ó–Ω–∏—â –≤–æ—Ä–æ–∂–∏—Ö –±–æ—Ç—ñ–≤, –ø–µ—Ä—à –Ω—ñ–∂ –≤–æ–Ω–∏ —Ä–æ–∑–ø–ª–∞–≤–ª—è—Ç—å —Ç–≤—ñ–π –ø—Ä–æ—Ü–µ—Å–æ—Ä!
            –ö–í–ê-–ö–í–ê!
        </p>
        <p class="controls-info">
            –ö–µ—Ä—É–≤–∞–Ω–Ω—è: <span style="color: yellow;">W A S D</span> –∞–±–æ <span style="color: yellow;">–°–¢–†–Ü–õ–ö–ò</span> –¥–ª—è —Ä—É—Ö—É.
            –ù–∞–≤–µ–¥—ñ—Ç—å <span style="color: yellow;">–ö–£–†–°–û–† –ú–ò–®–Ü</span> –¥–ª—è –ø—Ä–∏—Ü—ñ–ª—é–≤–∞–Ω–Ω—è.
            <span style="color: yellow;">–õ–Ü–í–ê –ö–õ–ê–í–Ü–®–ê –ú–ò–®–Ü</span> –¥–ª—è –ø–æ—Å—Ç—Ä—ñ–ª—É. –ñ–û–†–°–¢–ö–û!
        </p>

        <canvas id="gameCanvas" width="800" height="600"></canvas>

        <div id="game-message">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –í–•–†–Æ–ö-–ë—ñ–π!", —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö –¥–æ –í–ï–ù–û–ú–ï–ù–ê–õ–¨–ù–û–°–¢–Ü!</div>
        <button onclick="startGame()">–ü–æ—á–∞—Ç–∏ –í–•–†–Æ–ö-–ë—ñ–π! üöÄ</button>
    </div>

    <p class="footer-text">
        ¬© 2025 Shlappy –Ü–≥—Ä–∏: AlterTanks. –£—Å—ñ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ. –†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –Ω–∞ –≥–µ–π–º–µ—Ä—Å—å–∫–∏—Ö –ü–ö.
    </p>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameMessage = document.getElementById('game-message');

        let player;
        let enemies = [];
        let bullets = [];
        let walls = [];
        let gameActive = false;
        let score = 0;
        let mouseX = 0;
        let mouseY = 0;
        let keys = {}; // –î–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–ª–∞–≤—ñ—à

        const TILE_SIZE = 40; // –†–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è —Ç–∞–Ω–∫—ñ–≤/—Å—Ç—ñ–Ω

        // –ö–ª–∞—Å –¥–ª—è —Ç–∞–Ω–∫–∞ (–≥—Ä–∞–≤–µ—Ü—å –∞–±–æ –≤–æ—Ä–æ–≥)
        class Tank {
            constructor(x, y, color, isPlayer = false) {
                this.x = x;
                this.y = y;
                this.size = TILE_SIZE;
                this.color = color;
                this.angle = 0; // –ù–∞–ø—Ä—è–º–æ–∫ —Ç–∞–Ω–∫–∞
                this.turretAngle = 0; // –ù–∞–ø—Ä—è–º–æ–∫ –≥–∞—Ä–º–∞—Ç–∏
                this.speed = 2;
                this.health = 100;
                this.maxHealth = 100;
                this.reloadTime = 60; // –ö–∞–¥—Ä–∏ –º—ñ–∂ –ø–æ—Å—Ç—Ä—ñ–ª–∞–º–∏
                this.currentReload = 0;
                this.isPlayer = isPlayer;
                this.alive = true;
            }

            draw() {
                if (!this.alive) return;

                ctx.save();
                ctx.translate(this.x + this.size / 2, this.y + this.size / 2); // –¶–µ–Ω—Ç—Ä –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
                ctx.rotate(this.angle); // –û–±–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª–æ —Ç–∞–Ω–∫–∞
                ctx.fillStyle = this.color;
                ctx.fillRect(-this.size / 2, -this.size / 2, this.size, this.size); // –¢—ñ–ª–æ —Ç–∞–Ω–∫–∞

                // –ì–∞—Ä–º–∞—Ç–∞ (–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –Ω–∞ —Ç–∞–Ω–∫—É)
                ctx.fillStyle = '#AAAAAA'; // –°—ñ—Ä–∞ –≥–∞—Ä–º–∞—Ç–∞
                ctx.fillRect(-this.size / 4, -this.size / 2 - 10, this.size / 2, this.size / 2 + 10); // –ì–∞—Ä–º–∞—Ç–∞
                ctx.restore();

                // Health bar
                ctx.fillStyle = var_to_css_val('--health-bar-empty');
                ctx.fillRect(this.x, this.y - 10, this.size, 5);
                ctx.fillStyle = var_to_css_val('--health-bar-full');
                ctx.fillRect(this.x, this.y - 10, this.size * (this.health / this.maxHealth), 5);
            }

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤–æ—Ä–æ–∂–æ–≥–æ —Ç–∞–Ω–∫–∞ (–ø—Ä–æ—Å—Ç–µ AI)
            update(player) {
                if (!this.alive) return;

                // –†—É—Ö –¥–æ –≥—Ä–∞–≤—Ü—è –∞–±–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—É—Ö
                if (Math.random() < 0.02) { // 2% —à–∞–Ω—Å –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—Ä—è–º–æ–∫
                    this.angle = Math.random() * Math.PI * 2;
                }
                this.x += Math.cos(this.angle) * this.speed * 0.5; // –í–æ—Ä–æ–≥–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à—ñ
                this.y += Math.sin(this.angle) * this.speed * 0.5;

                // –¢—Ä–∏–º–∞—î–º–æ –≤–æ—Ä–æ–≥–∞ –≤ –º–µ–∂–∞—Ö –∫–∞—Ä—Ç–∏
                this.x = Math.max(0, Math.min(canvas.width - this.size, this.x));
                this.y = Math.max(0, Math.min(canvas.height - this.size, this.y));

                // –ü—Ä–∏—Ü—ñ–ª—é–≤–∞–Ω–Ω—è –Ω–∞ –≥—Ä–∞–≤—Ü—è
                const dx = player.x - this.x;
                const dy = player.y - this.y;
                this.turretAngle = Math.atan2(dy, dx); // –ì–∞—Ä–º–∞—Ç–∞ –≤–æ—Ä–æ–≥–∞ –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –≥—Ä–∞–≤—Ü—è

                // –°—Ç—Ä—ñ–ª—å–±–∞
                this.currentReload++;
                if (this.currentReload >= this.reloadTime && Math.random() < 0.01) { // 1% —à–∞–Ω—Å –≤–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏
                    this.shoot();
                    this.currentReload = 0;
                }
            }

            // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä—ñ–ª—É
            shoot() {
                if (!this.alive) return;
                const bulletSpeed = 7;
                const bulletX = this.x + this.size / 2 + Math.cos(this.turretAngle) * (this.size / 2 + 5);
                const bulletY = this.y + this.size / 2 + Math.sin(this.turretAngle) * (this.size / 2 + 5);
                bullets.push(new Bullet(bulletX, bulletY, this.turretAngle, bulletSpeed, this.isPlayer));
            }

            takeDamage(amount) {
                this.health -= amount;
                if (this.health <= 0) {
                    this.health = 0;
                    this.alive = false;
                }
            }
        }

        // –ö–ª–∞—Å –¥–ª—è —Å–Ω–∞—Ä—è–¥—É
        class Bullet {
            constructor(x, y, angle, speed, fromPlayer) {
                this.x = x;
                this.y = y;
                this.size = 8;
                this.angle = angle;
                this.speed = speed;
                this.fromPlayer = fromPlayer; // –ß–∏–π —Å–Ω–∞—Ä—è–¥ (–≥—Ä–∞–≤—Ü—è —á–∏ –≤–æ—Ä–æ–≥–∞)
                this.active = true;
                this.damage = 20; // –£—Ä–æ–Ω –≤—ñ–¥ —Å–Ω–∞—Ä—è–¥—É
            }

            draw() {
                if (!this.active) return;
                ctx.fillStyle = var_to_css_val('--bullet-color');
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size / 2, 0, Math.PI * 2);
                ctx.fill();
            }

            update() {
                if (!this.active) return;
                this.x += Math.cos(this.angle) * this.speed;
                this.y += Math.sin(this.angle) * this.speed;

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Ö–æ–¥—É –∑–∞ –º–µ–∂—ñ –∫–∞—Ä—Ç–∏
                if (this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height) {
                    this.active = false;
                }
            }
        }

        // –ö–ª–∞—Å –¥–ª—è —Å—Ç—ñ–Ω–∏ (–ø–µ—Ä–µ—à–∫–æ–¥–∏)
        class Wall {
            constructor(x, y, width, height) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.color = '#8B4513'; // –ö–æ—Ä–∏—á–Ω–µ–≤–∏–π –¥–ª—è —Å—Ç—ñ–Ω, —è–∫ —Å—Ç–∞—Ä—ñ —Ç–∞–Ω–∫–∏
            }

            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è CSS-–∑–º—ñ–Ω–Ω–∏—Ö
        function var_to_css_val(variableName) {
            return getComputedStyle(document.documentElement).getPropertyValue(variableName);
        }

        // --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –õ–æ–≥—ñ–∫–∞ –ì—Ä–∏ ---
        function startGame() {
            player = new Tank(canvas.width / 2 - TILE_SIZE / 2, canvas.height / 2 - TILE_SIZE / 2, var_to_css_val('--tank-player-color'), true);
            enemies = [];
            bullets = [];
            walls = [];
            score = 0;
            gameActive = true;
            gameMessage.textContent = '–ë–û–ô –†–û–ó–ü–û–ß–ê–¢–û! –ó–ù–ò–©–£–ô –í–û–†–û–ì–Ü–í! –ö–í–ê-–ö–í–ê!';

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ—Ä–æ–≥—ñ–≤
            for (let i = 0; i < 3; i++) {
                enemies.push(new Tank(
                    Math.random() * (canvas.width - TILE_SIZE),
                    Math.random() * (canvas.height - TILE_SIZE),
                    var_to_css_val('--tank-enemy-color')
                ));
            }

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω (–ø—Ä–æ—Å—Ç—ñ –ø–µ—Ä–µ—à–∫–æ–¥–∏)
            walls.push(new Wall(100, 100, 80, 80));
            walls.push(new Wall(canvas.width - 180, 100, 80, 80));
            walls.push(new Wall(100, canvas.height - 180, 80, 80));
            walls.push(new Wall(canvas.width - 180, canvas.height - 180, 80, 80));
            walls.push(new Wall(canvas.width / 2 - 40, canvas.height / 2 - 40, 80, 80));

            gameLoop();
        }

        // --- –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É ---
        document.addEventListener('keydown', (e) => {
            keys[e.key] = true;
        });

        document.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });

        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
            mouseY = e.clientY - rect.top;
        });

        canvas.addEventListener('mousedown', (e) => {
            if (e.button === 0 && gameActive) { // –õ—ñ–≤–∞ –∫–ª–∞–≤—ñ—à–∞ –º–∏—à—ñ
                player.shoot();
            }
        });

        // --- –Ü–≥—Ä–æ–≤–∞ –ø–µ—Ç–ª—è ---
        function gameLoop() {
            if (!gameActive) return;

            update();
            draw();

            requestAnimationFrame(gameLoop);
        }

        function update() {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
            if (player.alive) {
                let dx = 0;
                let dy = 0;

                // –†—É—Ö
                if (keys['w'] || keys['W'] || keys['ArrowUp']) dy -= player.speed;
                if (keys['s'] || keys['S'] || keys['ArrowDown']) dy += player.speed;
                if (keys['a'] || keys['A'] || keys['ArrowLeft']) dx -= player.speed;
                if (keys['d'] || keys['D'] || keys['ArrowRight']) dx += player.speed;

                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞–Ω–∫–∞
                player.x += dx;
                player.y += dy;

                // –¢—Ä–∏–º–∞—î–º–æ –≥—Ä–∞–≤—Ü—è –≤ –º–µ–∂–∞—Ö –∫–∞—Ä—Ç–∏
                player.x = Math.max(0, Math.min(canvas.width - player.size, player.x));
                player.y = Math.max(0, Math.min(canvas.height - player.size, player.y));

                // –ü—Ä–∏—Ü—ñ–ª—é–≤–∞–Ω–Ω—è –≥–∞—Ä–º–∞—Ç–∏ –Ω–∞ –∫—É—Ä—Å–æ—Ä –º–∏—à—ñ
                player.turretAngle = Math.atan2(mouseY - (player.y + player.size / 2), mouseX - (player.x + player.size / 2));
            }


            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–æ—Ä–æ–≥—ñ–≤
            enemies.forEach(enemy => enemy.update(player));
            enemies = enemies.filter(enemy => enemy.alive); // –í–∏–¥–∞–ª—è—î–º–æ –º–µ—Ä—Ç–≤–∏—Ö –≤–æ—Ä–æ–≥—ñ–≤

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–Ω–∞—Ä—è–¥—ñ–≤
            bullets.forEach(bullet => bullet.update());
            bullets = bullets.filter(bullet => bullet.active); // –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–Ω–∞—Ä—è–¥–∏

            // --- –ö–æ–ª—ñ–∑—ñ—ó ---
            // –°–Ω–∞—Ä—è–¥–∏ –∑ —Ç–∞–Ω–∫–∞–º–∏
            bullets.forEach(bullet => {
                if (!bullet.active) return;

                // –°–Ω–∞—Ä—è–¥–∏ –≥—Ä–∞–≤—Ü—è vs –≤–æ—Ä–æ–≥–∏
                if (bullet.fromPlayer) {
                    enemies.forEach(enemy => {
                        if (enemy.alive && checkCollision(bullet, enemy)) {
                            enemy.takeDamage(bullet.damage);
                            bullet.active = false;
                            gameMessage.textContent = `–í–•–†–Æ–ö! –í–æ—Ä–æ–∂–∏–π —Ç–∞–Ω–∫ –æ—Ç—Ä–∏–º–∞–≤ ${bullet.damage} —É—Ä–æ–Ω—É! –£ –Ω—å–æ–≥–æ ${enemy.health} HP!`;
                            if (!enemy.alive) {
                                score += 100;
                                gameMessage.textContent = `–§–ï–ù–ê–ú–ï–ù–ê–õ–¨–ù–û! –í–æ—Ä–æ–∂–∏–π —Ç–∞–Ω–∫ –∑–Ω–∏—â–µ–Ω–æ! +100 –í–•–†–Æ–ö-–û–ß–û–ö! –í—Å—å–æ–≥–æ: ${score}!`;
                            }
                        }
                    });
                } else { // –°–Ω–∞—Ä—è–¥–∏ –≤–æ—Ä–æ–≥–∞ vs –≥—Ä–∞–≤–µ—Ü—å
                    if (player.alive && checkCollision(bullet, player)) {
                        player.takeDamage(bullet.damage);
                        bullet.active = false;
                        gameMessage.textContent = `–ñ–û–†–°–¢–ö–û! –¢–≤—ñ–π —Ç–∞–Ω–∫ –æ—Ç—Ä–∏–º–∞–≤ ${bullet.damage} —É—Ä–æ–Ω—É! –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${player.health} HP!`;
                        if (!player.alive) {
                            gameMessage.textContent = `–ö–Ü–ù–ï–¶–¨ –•–ê–û–°–£! –¢–≤—ñ–π —Ç–∞–Ω–∫ –∑–Ω–∏—â–µ–Ω–æ! –¢–∏ –ø—Ä–æ–≥—Ä–∞–≤ –∑ ${score} –æ—á–∫–∞–º–∏! –ö–í–ê-–ö–í–ê! üíÄ`;
                            gameOver();
                        }
                    }
                }
            });

            // –°–Ω–∞—Ä—è–¥–∏ –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
            bullets.forEach(bullet => {
                walls.forEach(wall => {
                    if (bullet.active && checkCollision(bullet, wall)) {
                        bullet.active = false;
                    }
                });
            });

            // –ü–µ—Ä–µ–º–æ–≥–∞
            if (enemies.length === 0 && gameActive) {
                gameMessage.textContent = `–ü–ï–†–ï–ú–û–ì–ê! –¢–∏ –∑–Ω–∏—â–∏–≤ –≤—Å—ñ—Ö –í–•–†–Æ–ö-–≤–æ—Ä–æ–≥—ñ–≤! –¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: ${score}! üèÜ`;
                gameOver();
            }
        }

        // –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—ñ—Ç–∫–Ω–µ–Ω—å (AABB - Axis-Aligned Bounding Box)
        function checkCollision(obj1, obj2) {
            // –î–ª—è —Å–Ω–∞—Ä—è–¥—ñ–≤ (–∫–æ–ª–æ) —Ç–∞ —Ç–∞–Ω–∫—ñ–≤/—Å—Ç—ñ–Ω (–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫)
            if (obj1 instanceof Bullet) {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∫–æ–ª–∞ –∑ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–æ–º
                const circleX = obj1.x;
                const circleY = obj1.y;
                const circleRadius = obj1.size / 2;

                const rectX = obj2.x;
                const rectY = obj2.y;
                const rectWidth = obj2.width || obj2.size; // obj2.size –¥–ª—è —Ç–∞–Ω–∫—ñ–≤
                const rectHeight = obj2.height || obj2.size; // obj2.size –¥–ª—è —Ç–∞–Ω–∫—ñ–≤

                let testX = circleX;
                let testY = circleY;

                if (circleX < rectX) testX = rectX;
                else if (circleX > rectX + rectWidth) testX = rectX + rectWidth;
                if (circleY < rectY) testY = rectY;
                else if (circleY > rectY + rectHeight) testY = rectY + rectHeight;

                const distX = circleX - testX;
                const distY = circleY - testY;
                const distance = Math.sqrt((distX * distX) + (distY * distY));

                return distance <= circleRadius;
            } else {
                // –¶–µ –Ω–µ –º–∞—î —Ç—Ä–∞–ø–ª—è—Ç–∏—Å—è, –∞–ª–µ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–æ–º
                return obj1.x < obj2.x + (obj2.width || obj2.size) &&
                       obj1.x + (obj1.width || obj1.size) > obj2.x &&
                       obj1.y < obj2.y + (obj2.height || obj2.size) &&
                       obj1.y + (obj1.height || obj1.size) > obj2.y;
            }
        }


        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // –û—á–∏—Å—Ç–∫–∞ canvas

            // –ú–∞–ª—é—î–º–æ —Å—Ç—ñ–Ω–∏
            walls.forEach(wall => wall.draw());

            // –ú–∞–ª—é—î–º–æ –≤–æ—Ä–æ–≥—ñ–≤
            enemies.forEach(enemy => enemy.draw());

            // –ú–∞–ª—é—î–º–æ –≥—Ä–∞–≤—Ü—è
            if (player.alive) {
                player.draw();
            }

            // –ú–∞–ª—é—î–º–æ —Å–Ω–∞—Ä—è–¥–∏
            bullets.forEach(bullet => bullet.draw());
        }

        function gameOver() {
            gameActive = false;
            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–±—Å—É—Ä–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –µ—Ñ–µ–∫—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ —Ç—É—Ç!
        }

        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∏–∫–ª–∏–∫, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
        // startGame(); // –ó–∞–∫–æ–º–µ–Ω—Ç—É—î–º–æ, —â–æ–± –≥—Ä–∞ —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∞ –ø–æ –∫–Ω–æ–ø—Ü—ñ
    </script>

</body>
</html>
